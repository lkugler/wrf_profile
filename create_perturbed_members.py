import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from math import *

"""
Authors: J. Schr√∂ttle, modified by L. Kugler
"""

def create_perturbed_profiles(n_ens, f_orig_profile_LMU='./raso.raso', outdir='./'):

    for iens in range(41, n_ens+1):

        ##
        #load raso data
        a=np.loadtxt(f_orig_profile_LMU, skiprows=4)

        #retrieve profiles
        z=a[:,1]  # height / m
        p=a[:,0]  # pressure / hPa
        t=a[:,2]  # temperature / K
        td=a[:,3] # empty field
        rh=a[:,4] # relative humidity / %
        r=a[:,5]  # water vapor mixing ratio / (g/kg)
        ws=a[:,6] # wind speed / (m/s)
        wd=a[:,7] # wind direction / (deg)

        nz=z.shape[0]
        print "nz:",nz
        k0=20
        print("%9.4f %10.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f" % (p[k0], z[k0], t[k0], td[k0], rh[k0], r[k0], ws[k0], wd[k0]))

        # write raso file
        f=open('data_old.txt', 'w')
        f.write('# 06610 LSMP Payerne Observations at 12Z 30 Jul 2008\n')
        f.write('# Radiosonde file generated by raso.rb\n')
        f.write('#\n')
        f.write('  P [hPa],     Z [m],    T [K],   Td [K],   RH [%], r [g/kg], WS [m/s], WD [deg]\n')
        for kk in np.arange(0,nz):
        f.write("%9.4f %10.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f\n" % (p[kk], z[kk], t[kk], td[kk], rh[kk], r[kk], ws[kk], wd[kk]))
        f.close()

        # random number profile
        mu=0.; sigma=.5
        mu=0.; sigma=.25
        step=4
        step=8
        step=20
        rand_coarse =np.random.normal(mu,sigma,nz/step)
        rand_coarse2=np.random.normal(mu,sigma,nz/step)
        rand_coarse4=np.random.normal(mu,sigma,nz/step)
        mu=0.; sigma=.02 #until e24
        mu=0.; sigma=.005
        mu=0.; sigma=.001
        rand_coarse3=np.random.normal(mu,sigma,nz/step)
        z_coarse=np.linspace(np.amin(z),np.amax(z),nz/step)
        rand =np.copy(z)*0.
        #steps
        for kk in np.arange(0,nz):
            #print(kk, rand_coarse[kk/step])
            rand[kk]=np.mean(rand_coarse[kk/step])


        #correlated w/ spline
        #print 'rand', rand
        #print 'fn', fn
        print 'z_coarse.min', np.amin(z_coarse)
        print 'z_coarse.max', np.amax(z_coarse)
        print 'z_coarse.shape', z_coarse.shape
        print 'z.min', np.amin(z)
        print 'z.max', np.amax(z)
        print 'z.shape', z.shape
        f   = interp1d(z_coarse,rand_coarse, kind='cubic')
        fn  = f(z)
        #
        f2  = interp1d(z_coarse,rand_coarse2,kind='cubic')
        fn2 = f2(z)
        #
        f3  = interp1d(z_coarse,rand_coarse3,kind='cubic')
        fn3 = f3(z)
        #
        f4  = interp1d(z_coarse,rand_coarse4,kind='cubic')
        fn4 = f4(z)
        #add upon profiles
        #print 'fn -rand',fn-rand
        #print 'fn2-rand',fn2-rand
        #print 'fn3-rand',fn3-rand
        t+=fn
        ws+=fn2
        rh+=rh*fn3

        # if False:
        #     # Four-panel plot
        #     fig2, (ax1, ax4, ax7, ax8) = plt.subplots(1,4,sharey=True,figsize=(24, 6))
        #     # Temperature
        #     ax1.set_ylabel('Height / m')
        #     #
        #     ax1.plot(fn,z,'-r')
        #     ax1.set_xlabel('T\' / K')
        #     # Relative Humidity
        #     ax4.plot(fn3,z,'o--b')
        #     ax4.set_xlabel('rh\'')
        #     ax4.set_xlim(-.3,.3)
        #     # Wind
        #     ax7.plot(fn2,z,'o-g')
        #     ax7.set_xlabel('u\' / (m/s)')
        #     #
        #     ax8.plot(fn4,z,'o-g')
        #     ax8.set_xlabel('v\' / (m/s)')

        #     istr=str(iens)
        #     if iens < 100: istr='0' +str(iens)
        #     if iens < 10:  istr='00'+str(iens)
        #     plt.savefig("atmos_profiles_rand_"+istr+".png")

        u=np.copy(ws)*0.
        v=np.copy(ws)*0.
        #
        for ii in range(ws.shape[0]):
            u[ii]=ws[ii]*cos(-2.*pi*wd[ii]/360.)
            v[ii]=ws[ii]*sin(-2.*pi*wd[ii]/360.)

        #
        # perturbation on wind
        #
        u+=fn2
        v+=fn4

        # # Four-panel plot
        # fig3, (ax2, ax3, ax5, ax6) = plt.subplots(1,4,sharey=True,figsize=(24, 6))
        # # Temperature
        # ax2.set_ylabel('Height / m')
        # ax2.plot(t,z,'o-r')
        # ax2.set_xlabel('Temperature / K')
        # # Relative Humidity
        # ax3.plot(rh,z,'o-b')
        # ax3.set_xlabel('Relative Humidity / %')
        # ax3.set_xlim(0,100)
        # # Wind Speed
        # ax5.plot(u,z,'o-g')
        # ax5.set_xlabel('u / (m/s)')
        # ax5.set_xlim(-20,20)
        # # Wind direction
        # ax6.plot(v,z,'o--g')
        # ax6.set_xlabel('v / (deg)')
        # ax6.set_xlim(-20,20)
        # plt.savefig("atmos_profiles_"+istr+".png")


        #
        # transform back
        #
        for ii in range(ws.shape[0]):
            u[ii]=ws[ii]*cos(-2.*pi*wd[ii]/360.)
            v[ii]=ws[ii]*sin(-2.*pi*wd[ii]/360.)
            ws[ii]=np.sqrt(u[ii]**2 + v[ii]**2)
            #wd[ii]=360.*acos(u[ii]/ws[ii])/(-2.*pi)

            # lkugler
            wd[ii]=90. -np.arctan2(-v[ii], -u[ii])
        wd[wd <= 0] += 360.

        #write raso file

        f_out = outdir + 'raso.nat.'+str(iens).zfill(3)
        f=open(f_out, 'w')
        f.write('# 06610 LSMP Payerne Observations at 12Z 30 Jul 2008\n')
        f.write('# Radiosonde file generated by raso.rb\n')
        f.write('#\n')
        f.write('  P [hPa],     Z [m],    T [K],   Td [K],   RH [%], r [g/kg], WS [m/s], WD [deg]\n')
        for kk in np.arange(0,nz):
            f.write("%9.4f %10.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f\n" % (p[kk], z[kk], t[kk], td[kk], rh[kk], r[kk], ws[kk], wd[kk]))
        f.close()


if __name__ == '__main__':


    maindir = '/jetfs/home/lkugler/wrf_sounding/'
    n_ens = 40
    outdir = maindir+'data/LMU/improved/'
    f_orig_profile_LMU = outdir + 'raso.v2'

    create_perturbed_profiles(n_ens, f_orig_profile_LMU=f_orig_profile_LMU, outdir=outdir)
